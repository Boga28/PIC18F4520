#ifndef DS1820_C                                                                 
#define DS1820_C  

#include "ds1820.h"
#include "1wire.h"  
#include "1wire.c" 


uchar_t TEMPBF[10];  
uchar_t period;   //10s period    
uchar_t DevicesFound; // Number of devices found   
uchar_t queue;                              
                                  
void searchRom(){  
   //onewire_reset(); 
   //onewire_write(0xF0);
   switch(queue){ 
   case 0: 
        DevicesFound = 0;  // Reset device counter    
        if(Ow_First()){    // Check for the first device 
          DevicesFound++;  // Increment the device found counter
          for(i=0; i<8; i++){    
             SlaveROM1[i]=ROM_NO[i];  
          }     
          memset(ROM_NO,0,8); 
          queue++;
          }else
             queue=0;  
   break;
   
   case 1:
        if(Ow_Next()){    // Check for the first device 
          DevicesFound++;  // Increment the device found counter
          for(i=0; i<8; i++){    
             SlaveROM2[i]=ROM_NO[i];  
          }     
          memset(ROM_NO,0,8); 
          queue++;
        }else
          queue=0;   
   break; 
   
   case 2:
        if(Ow_Next()){    // Check for the first device 
          DevicesFound++;  // Increment the device found counter
          for(i=0; i<8; i++){    
             SlaveROM3[i]=ROM_NO[i];  
          }     
          memset(ROM_NO,0,8); 
        }                                                                                                                                  
        queue=0;
//        printf("\fROM1: %02X %02X %02X  %02X  %02X  %02X  %02X  %02X\r",SlaveROM1[0],SlaveROM1[1],SlaveROM1[2],SlaveROM1[3],SlaveROM1[4],SlaveROM1[5],SlaveROM1[6],SlaveROM1[7]); 
  //      printf("ROM2: %02X %02X %02X  %02X  %02X  %02X  %02X  %02X\r",SlaveROM2[0],SlaveROM2[1],SlaveROM2[2],SlaveROM2[3],SlaveROM2[4],SlaveROM2[5],SlaveROM2[6],SlaveROM2[7]);  
    //    printf("ROM2: %02X %02X %02X  %02X  %02X  %02X  %02X  %02X\r",SlaveROM3[0],SlaveROM3[1],SlaveROM3[2],SlaveROM3[3],SlaveROM3[4],SlaveROM3[5],SlaveROM3[6],SlaveROM3[7]);  
   break;
   }
    
   if (DevicesFound == 0)         
      printf("No devices found\r");                      
       
}      
                                  
                                                  
/*
 * ds1820_read()             
 * Description: reads the ds18x20 device on the 1-wire bus and returns
 *              the temperature                                                  
 */

void ds1820_read() {                                       
    uint8_t busy=0, temp1, temp2;
    sint16_t temp3; 
                 
    //ds1820_configure(0x00, 0x00, 0x00);     //9 bit resolution

    onewire_reset();                     
    onewire_write(0xCC);            //Skip ROM, address all devices
    onewire_write(0x44);            //Start temperature conversion

    while(busy == 0)                //Wait while busy (bus is low)
        busy = onewire_read();    
                  
    onewire_reset();
    onewire_write(0xCC);            //Skip ROM, address all devices
    onewire_write(0xBE);            //Read scratchpad     
    
      
    temp1 = onewire_read();         
    temp2 = onewire_read(); 
                        
    temp3 = temp2;
    temp3 = temp1 + (temp3 << 8);
    temp3 = (sint16_t) temp3 / 16;
    //result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution
    sprintf(TEMPBF,"TEMP :%Ld",temp3); 
    memset(strLCD,0,32);
    memcpy(strLCD,TEMPBF,9); 
    period=0;                  
}
    
/*
 * ds1820_configure(int8 TH, int8 LH, int8 config)
 * Description: writes configuration data to the DS18x20 device
 * Arguments: alarm trigger high, alarm trigger low, configuration
 */                                                                               

void ds1820_configure(int8 TH, int8 TL, int8 config) {
    onewire_reset();
    onewire_write(0xCC);            //Skip ROM, address all devices
    onewire_write(0x4E);            //Write to scratchpad
    onewire_write(TH);
    onewire_write(TL);
    onewire_write(config);
}


#endif /*DS1820_C*/                              
