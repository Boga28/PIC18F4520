#include "1wire.h" 
#ifndef ONE_WIRE_C
#define ONE_WIRE_C 
    

#define ONE_WIRE_PIN PIN_C0
                                

uchar_t i;    
uchar_t SlaveROM1[8]; 
uchar_t SlaveROM2[8];

// global search state
uchar_t ROM_NO[8];                                  
uint8_t LastDiscrepancy;
uint8_t LastFamilyDiscrepancy;
uint8_t LastDeviceFlag;
uchar_t crc8;                           
                              
/*    
 * onewire_reset()
 * Description: Initiates the one wire bus.        
 */
// OK if just using a single permanently connected device               
                                          
void onewire_reset() { 
   OneWireLow(); 
   delay_us(500);
   OneWireRelease();           
   delay_us(500); 
}                                         
         
/*                               
 * onewire_write(int8 data)
 * Arguments: a byte of data.
 * Description: writes a byte of data to the device.
 */
void onewire_write(uchar_t data) { 
   int8 count;
    for(count = 0; count < 8; ++count) {
        OneWireLow();
        delay_us(2);                // pull 1-wire low to initiate write time-slot.
        if(data & 0x01)                
          OneWireRelease();  
        delay_us(65);               // wait until end of write slot.
        OneWireRelease(); // set 1-wire high again,
        delay_us(2);                // for more than 1us minimum. 
        data = (data >> 1); 
    }
}                                                                 
                                       
/*
 * onewire_read()        
 * Description: reads and returns a byte of data from the device.                                                                 
 */                                  
uint8_t onewire_read() { 
    uint8_t count, data=0;                     
    for(count = 0; count < 8; ++count) {
        OneWireLow();
        delay_us(2);                // pull 1-wire low to initiate read time-slot.
        OneWireRelease();              // now let 1-wire float high,
        delay_us(4);                // let device state stabilise, 
        if(PORTC_0)                 //ZATEN RELEASE KONUMUNA TEKRAR BIR AYARLAMAYA GEREK YOK         
           bit_set(data,count);   
        delay_us(120);              // wait until end of read slot.
    }                         
    return data;    
} 
                 
              
void OneWireRelease(){ 
    PORTC_0 = 1; // Set as output  BUSDIR     
    TRISC_0 = 1; // Set high       BUSOUT else{     
} 

void OneWireLow(){        
   PORTC_0 = 0; // Set as output  BUSDIR
   TRISC_0 = 0; // Set low        BUSOUT
}       
                                                                              
                             
uchar_t docrc8(uchar_t value){
   crc8 = dscrc_table[crc8 ^ value];    // Xor operation
   return crc8;
}  
             
uint8_t Ow_Reset(){
   uint8_t OW=0; 
   OneWireLow();    
   delay_us(485);
   OneWireRelease(); 
   delay_us(70); 
   OW = Ow_Read_Bit(); 
   delay_us(430);  
   return OW; 
}  

unsigned short Ow_Read_Bit(){
   unsigned short BitValue;    // Bit to be returned
   OneWireLow();               // Set pin 2 in PORT E as output
                               // Drive bus low   LATE.B2;   for PIC18
   delay_us(2);                // Wait 6 usecs
   OneWireRelease();                 // Release the bus
   delay_us(4);                // Wait 9 usecs
   BitValue = PORTC_0;         // Read bit value on pin 0 on PORT C
   delay_us(120);               // Wait 55 usecs
   return BitValue;            // Return bit read
}
                                    
// Sends a '1' bit to the I/O pin  See application note 126
void Ow_Write_One(){   
   OneWireLow();      // Set pin 2 in PORT E as output
   delay_us(2);        // Drive bus low
   OneWireRelease();  
   delay_us(65);       // Wait 6 usecs        (6*4)*0.25 us
   OneWireRelease();  // Release the bus
   delay_us(2);      // Wait 64 usecs        (64*4)*0.25 us
}
                      
// Sends a '0' bit to the I/O pin   See application note 126
void Ow_Write_Zero(){   
   OneWireLow();     // Set pin 2 in PORT E as output
                     // Drive bus low
   delay_us(65);     // Wait 60 usecs
   OneWireRelease(); // Release the bus
   delay_us(10);     // Wait 10 usecs
}
   
uint8_t Ow_Search(){
   uint8_t id_bit_number;
   uint8_t last_zero, rom_byte_number, search_result;
   uint8_t id_bit, cmp_id_bit;
   uchar_t rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;
   crc8 = 0; 
   
         // if the last call was not the last one
   if (!LastDeviceFlag){
      // check if there are 1-Wire device (s) 0 if the device(s) responded, 1 if no devices did
      if (Ow_Reset()){
         // reset the search
         LastDiscrepancy = 0;
         LastDeviceFlag = 0;
         LastFamilyDiscrepancy = 0;
         return 0;
      }
        // Issue command Search_ROM
        onewire_write(0xF0);
        // loop to do the search
        do{// read a bit and its complement
           id_bit = OW_Read_Bit();
           cmp_id_bit = OW_Read_Bit();
           // 11 no devices on the 1-wire
           // check for no devices on 1-wire
           if((id_bit == 1) && (cmp_id_bit == 1))
              break;
           else{
              // all devices coupled have 0 or 1
              if(id_bit != cmp_id_bit)
                 search_direction = id_bit; // bit write value for search
              else{
                 // if this discrepancy is before the Last Discrepancy
                 // on a previous next then pick the same as last time
                 if (id_bit_number < LastDiscrepancy)        
                    search_direction = ((ROM_NO[rom_byte_number] &  rom_byte_mask) > 0);
                 else
                    // if equal to last pick 1, if not then pick 0
                    search_direction = (id_bit_number == LastDiscrepancy);
                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){ 
                       last_zero = id_bit_number;
                       // check for Last discrepancy in family
                       if (last_zero < 9) 
                           LastFamilyDiscrepancy = last_zero;
                    }
               }
               // set or clear the bit in the ROM byte rom_byte_number
               // with mask rom_byte_mask
               if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
               else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
               // serial number search direction write bit
               if (search_direction)
                  Ow_Write_One();
               else
                  Ow_Write_Zero();
               // increment the byte counter id_bit_number
               // and shift the mask rom_byte_mask

               id_bit_number++;
               rom_byte_mask <<= 1;

               // if the mask is 0 then go to new SerialNum byte rom_byte_number
               //and reset mask
               if (rom_byte_mask == 0){
                  docrc8(ROM_NO[rom_byte_number]); // accumulate the CRC
                  rom_byte_number++;
                  rom_byte_mask = 1;
               }
           }                              
        }   // End of search loop                 
        while(rom_byte_number < 8); // loop until through all ROM bytes 0-7
        // if the search was successful then
        if (!((id_bit_number < 65) || (crc8 != 0))){
           // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
           LastDiscrepancy = last_zero;
           // check for last device
           if (LastDiscrepancy == 0)
              LastDeviceFlag = 1;
           search_result = 1;
        }
   }
   // if no device found then reset counters so next 'search' will be
   // like a first
   if (!search_result || !ROM_NO[0]){
            LastDiscrepancy = 0; 
            LastDeviceFlag = 0;
            LastFamilyDiscrepancy = 0;
            search_result = 0;
   }
   return search_result;
}   // End of Ow-Search function

// Finds the first device
uint8_t Ow_First(){
   LastDiscrepancy = 0;
   LastDeviceFlag = 0;
   LastFamilyDiscrepancy = 0;
   return Ow_Search();
}


// Finds any other devices after the first one
uint8_t Ow_Next(){
   return Ow_Search();
} 

// Set up search to look for a certain device family code
void Ow_Target_Setup(uchar_t family_code){
   uint8_t i;
   // set the search state to find SearchFamily type devices
   ROM_NO[0] = family_code;
   for (i = 1; i < 8; i++)
   ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = 0;
}
                                                   
void Ow_Family_Skip_Setup(){
   // set the Last discrepancy to last family discrepancy
   LastDiscrepancy = LastFamilyDiscrepancy;
   LastFamilyDiscrepancy = 0;
   // check for end of list
   if (LastDiscrepancy == 0)
      LastDeviceFlag = 1;
}
                    
#endif /*ONE_WIRE_C*/
