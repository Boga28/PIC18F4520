#include "glcd.h"    

#ifndef GLCD_C
#define GLCD_C
//EARTH ANIMATION SDCARD POSITION 
uint16_t sectorPosition;     

// BUFFER FOR DISPLAY                                
uchar_t GLCD_BUFFER[512]; 

                             
void GLCD_DrawTop(){  /* GLCD string write function */ 
   uchar_t x=0, y=0, pageAdd=0xB8;
   uint16_t arrayPosition=0;
   for(y=0;y<4;y++){ 
      CS1FUN();  
      GLCD_Command(pageAdd+y);
      GLCD_Command(0x40);   
      for(x=0;x<64;x++){  
         //if((x%16)==0)
           // printf("\n\r"); 
         GLCD_Char(GLCD_BUFFER[arrayPosition]);  
         arrayPosition++;               
      }                     
      CS2FUN();  
      GLCD_Command(pageAdd+y);
      GLCD_Command(0x40);    
      for(x=0;x<64;x++){  
      //  if((x%16)==0)
         //  printf("\n\r"); 
        GLCD_Char(GLCD_BUFFER[arrayPosition]); 
        arrayPosition++;           
      } 
   }
}                                                                                
void GLCD_DrawBottom(){  /* GLCD string write function */       
   uchar_t x=0, y=0, pageAdd=0xBC;
   uint16_t arrayPosition=0;
   for(y=0;y<4;y++){ 
       CS1FUN();                         
       GLCD_Command(pageAdd+y);
       GLCD_Command(0x40);   
      for(x=0;x<64;x++){  
         //if((x%16)==0)
          // printf("\n\r");
         GLCD_Char(GLCD_BUFFER[arrayPosition]);  
         arrayPosition++;               
      }                     
      CS2FUN();  
      GLCD_Command(pageAdd+y);
      GLCD_Command(0x40);    
      for(x=0;x<64;x++){ 
       // if((x%16)==0)
         //  printf("\n\r");
        GLCD_Char(GLCD_BUFFER[arrayPosition]); 
        arrayPosition++;    
      } 
   }
}                                                                                
                           
GLCD_StringChar(uint8_t data){        
     uint8_t dat,*ptr;  uint8_t pageAdd=0xB8;
     uint8_t i;
     CS1FUN();  
     GLCD_Command(pageAdd+4);                   
     GLCD_Command(0x48);
     for(i=0;i<6;i++){ 
         GLCD_Char(GLCD_ASCII[data][i]);               
     } 
}
 
void GLCD_Init(){       // GLCD Initialization function
    TRISBB = 0;          // Make Control pin as output 
    TRISD = 0;          // Make Data pin as output   
    RW=0;
    RST = 1;            // Make reset pin High 
    RST = 0;            // Make reset pin High 
    CS1 = 1; CS2 = 1;   // Select Left half of display 
    delay_ms(20);     
    GLCD_Command(0x3E); // Display OFF           
    GLCD_Command(0x40); // Set X address (column=0) 
    GLCD_Command(0xB8); // Set Y address (page=0) 
    GLCD_Command(0xC0); // Set z address (start line=0) 
    GLCD_Command(0x3F); // Display ON 
}                                                
void GLCD_Command(uchar_t cmd){ // GLCD Command function
                              
    LCD_data = cmd;   // Copy command on data pin 
    RS = 0;           // Make RS LOW for command register
    EN = 1;// Make HIGH-LOW transition on Enable
    NOP();   
    NOP();  
    NOP();    
    EN = 0; 
    NOP();
    NOP(); 
    NOP(); 
}                        
void GLCD_Char(uchar_t data){ // GLCD Data function
    LCD_data = data;       // Copy Data on data pin
    RS = 1;                // Make RS HIGH for data register 
    EN = 1;                // Make HIGH-LOW transition on Enable
    NOP();
    EN = 0;
    NOP();          
    //printf("%X ",data);  
}                                                                             
void GLCD_Clear(){
   int i,j;
   CS1 = 1; CS2 = 1;                           /* Select both left & right half of display */
   for(i=0;i<8;i++){
      GLCD_Command((0xB8)+i);                     /* Increment page each time after 64 column */
      for(j=0;j<64;j++){
         GLCD_Char(0);                        /* Write zeros to all 64 column */
      }
   }
   GLCD_Command(0x40);                           /* Set Y address (column=0) */
   GLCD_Command(0xB8);                           /* Set x address (page=0) */
}      
void CS1FUN(){
   CS1=1; //Selecting 1 Half
     NOP();                 
   CS2=0; //Switch off other half
} 
void CS2FUN(){
   CS1=0;  //Switch off First Half
     NOP(); 
   CS2=1;  //Selecting 2nd Half
}

void NOP(){           
   #asm                  
   NOP                          
   #endasm                                 
}

#endif //GLCD_H
