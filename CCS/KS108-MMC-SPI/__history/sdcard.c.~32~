#include "sdcard.h"  

int set_BLOCKLEN( int32 size){
   int r1;

   r1=mmc_cmd(0x50,size,16,0x00,0x40); /// cmd.data,tries,valid code,invlaid code
   if (r1==0x00) goto done ;
   if (r1==0x40) goto invalid;


   return(false);
   invalid:
   #IF MMC_SET_BLOCK_LEN_TRACE
      printf("\n\r para err\n\r");
   #ENDIF
done:
   block_size=size; //// assign global block size
   //printf("\n\r blk size=%lu",block_size);
   return(true);
}
int read_BLOCK( int32 address, char *buff){
   //// low level read ..requires block len to be called first to set global blocksize
   int r1;
   long i,iw; /// allows large gt 255 buff size addressing
   //int data[128];
   r1=mmc_cmd(0x51,address,16,0x00,0x40);

   if (r1==0x00) goto get_token ; // we can read data payload
   if (r1==0x40) goto invalid;

   #IF MMC_READ_BLOCK_TRACE
      printf("\n\r read block err 1 address=%lu \n\r",address);
   #ENDIF
   return(false);
   invalid:
   #IF MMC_READ_BLOCK_TRACE
      printf("\n\r read block err 2 adress=%lu \n\r",address);
   #ENDIF
   return(false);
   get_token:
   for(iw=0;iw<1024;iw++){
   r1=SPI_transfer(0xFF);
   //data[iw]=r1;
   if (r1==0xFE) goto read_data; // read token $FE
   }
   #IF MMC_READ_BLOCK_TRACE
      printf("\n\r read block err 3 address=%lu \n\r",address);
   #ENDIF
   return(false);
   read_data:
   #IF MMC_READ_BLOCK_TRACE
      printf("\n\r read block tries for FE =%lu \n\r",iw);
   #ENDIF

   for (i=0;i<block_size;i++) buff[i]=SPI_transfer(0xFF);
   SPI_transfer(0xFF); // read crc
   SPI_transfer(0xFF);

   return(true);
} 
uint8_t mmc_cmd(uint8_t cmd,uint32_t address,uint8_t tries,uint8_t valid,uint8_t invalid){
   uint8_t i,r1;
   for( i=0;i<16;i++) SPI_transfer(0xFF);// digest prior operation
   // commands
   // 7 6 5 4 3 2 1 0
   // 0 1 b b b b b b bbbbbb=cmd
   // 16=0x50 set blocklength
   // 17=0x51 read block
   // 24=0x58 write block
   #if MMC_CMD_TRACE
   printf("\n\r cmd=%2X \n\r",cmd);
   #endif
   SPI_transfer(cmd);
   SPI_transfer(MAKE8(address,3));
   SPI_transfer(MAKE8(address,2));
   SPI_transfer(MAKE8(address,1));
   SPI_transfer(MAKE8(address,0));
   SPI_transfer(0x95); // valid crc for 0x40 only invalid for others but spi mode doesn't care
   for(i=0;i< tries;i++) {
      r1=SPI_transfer(0xFF);
      #if MMC_CMD_TRACE
         printf(" %2X",r1);
      #endif
      if (r1==valid) break;
      if (r1==invalid) break;
   }
   return(r1);
}
uint32_t init_MMC(uint8_t max_tries){
   uint32_t start_lsec;
   int16 sec_resv,sec_for_FAT,bytes_per_sector,root_dir_entries,
   sec_for_data,count_of_clusters,root_dir_sectors,total_sectors;
   uint8_t i,tries,sec_per_cluster,c;
   uchar_t buff[32];      
   tries=0;        
   cmd0:
   ///////////////////// place null treminators in globals fname and buff
   for(i=0;i<MAX_FILES;i++){
      file[i].name[0]=0;
      file[i].rec_size=32; //// default rec_s   ize = 32 byte tile size of FAT16
   }
   //buff[MMC_BUFF_SIZE]=0;
   //frec_size=32; //// default rec_size = 32 byte tile size of FAT16
   CS_ENABLE(); /// reset chip hardware !!! required
   delay_ms(20);
   for(i=0;i<20;i++) SPI_transfer(0xFF); // min 80 clocks to get MMC ready
   CS_DISABLE(); /// !!! required
   delay_ms(20);   
   #if MMC_INIT_TRACE
      printf("cmd0");
   #ENDIF
   c=mmc_cmd(0x40,0x00000000,128,0x01,0x99);

   if (c==0x01) goto exit_cmd1;

   // note: i must cycle at least 8 times (16 is safe )

   if (tries++<max_tries) goto cmd0; /// restart
   else return (10);
   exit_cmd1:
   // CPDMOD - This SOMETIMES seems to be necessary
   // output_high(_CS);
   // SPI_READ(0xFF); // min 8 clocks to get MMC ready
   // output_low(_CS);
   //CPDMOD End


   tries=0;
   cmd1:

   /// now try to switch to idle mode
   /// Note: cmd1(idle) is the only command allowed after a cmd0(reset)
   //

   c=mmc_cmd(0x41,0x00000000,128,0x00,0x99);
   if (c==0x00) { goto ready;}


   if( tries++<max_tries) { printf("cmd1"); goto cmd1;}
   else return(11);
   ready:  
   //for( i=0;i<32;i++) SPI_READ(0xFF);// digest operation
   /// MMC is inialized and in idle state ready for commands
   ////
   //// we need to first access the master boot sector physical address=0
   ///
   if(set_BLOCKLEN((int32)32)==false) return(12); /// sets global block_size to 32

   if (read_block(0x00000000,buff)==false) return (99); /// read the first few bytes
   #if MMC_INIT_TRACE
      printf("\n\r sector0=");
      for(i=0;i<32;i++)printf("%2X ",buff[i]);
   #ENDIF
   if (buff[0]==0xEB || buff[0]==0xE9){
      /// sector 0 is the boot sector
      #if MMC_INIT_TRACE
         printf("\n\r boot sector= 0");
      #ENDIF
   }
   else{
      //// partition

      /// access the master boot sector physical address 0 at offset 1BE
      if (read_BLOCK(0x000001BE,buff)==false) return(13);
      #if MMC_INIT_TRACE
         for(i=0;i<32;i++)printf("%2X ",buff[i]);
      #ENDIF
      // start_lsec is address of the partion boot sector
      start_lsec=make32(buff[11],buff[10],buff[9],buff[8]);
      #if MMC_INIT_TRACE
         printf("\n\r boot sector= %lu",start_lsec);
      #ENDIF
      if (read_BLOCK(start_lsec*512,buff)==false) return(14);
   }

   bytes_per_sector=make16(buff[12],buff[11]);
   if(bytes_per_sector!=512) return(15);
   sec_per_cluster=buff[13];
   cluster_size_bytes=(int16)sec_per_cluster*bytes_per_sector;


   sec_resv=make16(buff[15],buff[14]);

   root_dir_entries=make16(buff[18],buff[17]);// number of 32 byte tiles

   total_sectors=make16(buff[20],buff[19]);

   sec_for_FAT=make16(buff[23],buff[22]);
   //branch to file directory
   fat1_address=(start_lsec+sec_resv)*bytes_per_sector;
   fat2_address=fat1_address+bytes_per_sector*sec_for_FAT;
   root_dir_address=(sec_for_FAT*2+start_lsec+sec_resv)*bytes_per_sector;
   data_area_address=root_dir_address+root_dir_entries*32;
   ///// check for FAT16
   root_dir_sectors=root_dir_entries>>4;

   sec_for_data=total_sectors - sec_resv -sec_for_fat*2 -root_dir_sectors;

   count_of_clusters=sec_for_data/sec_per_cluster;

   if (count_of_clusters <4085 || count_of_clusters>65525) return(17);

   winhex_adj=fat1_address-bytes_per_sector;

   #if MMC_INIT_TRACE

      printf("Files:/n/r");
      for(i=0;i<MAX_FILES;i++){
         printf("/n/r",file[i].name[i]);
      }

   #ENDIF

   return(0);
}

