 
#include "i2c.h"
#include "definitions.h"                                                                             
#include "ucregisters.h"     


void I2C_Clock(void)
{
    delay_us(1);
    SCL_DIR = 1;        // Wait for Some time and Pull the SCL line High
 
    delay_us(1);        // Wait for Some time
    SCL = 0;        // Pull back the SCL line low to Generate a clock pulse
    SCL_DIR=0;
}

                        
uchar_t _I2C_Read(uchar_t mode){ 
    uchar_t i, dat=0x00;
    SDA_DIR=1;               //Make SDA as I/P
    for(i=0;i<8;i++){        // loop 8times to read 1-byte of data
       delay_us(1);
        SCL_DIR = 1;            // Pull SCL High
        delay_us(1); 
 
        dat = dat<<1;       //dat is Shifted each time and
        dat = dat | SDA;    //ORed with the received bit to pack into byte
                       
        SCL = 0;                     
        SCL_DIR = 0;        // Clear SCL to complete the Clock
       }                                                        
       _I2CACK(mode);
   return dat;               // Finally return the received Byte*
}                                                                 
    
void _I2C_Write(uchar_t  dat){
    uchar_t i;
    for(i=0;i<8;i++){         // loop 8 times to send 1-byte of data  
        if(dat & 0x80){
            SDA_DIR = 1;         // Send Bit by Bit on SDA line 
        }else{  
            SDA=0;
            SDA_DIR = 0; 
        }
        I2C_Clock();         // Generate Clock at SCL
        dat = dat<<1;
      }                                                 
        SDA_DIR = 1;                 // Set SDA at last    
        I2C_Clock(); 
}    
    
 
void _I2CACK(uchar_t mode){ 
   if(mode==1){ //ACK     
    SDA = 0;        //Pull SDA low to indicate Positive ACK 
    SDA_DIR=0;
    I2C_Clock();    //Generate the Clock
    SDA_DIR = 1;        // Pull SDA back to High(IDLE state)
   }else{      //NACK 
    SDA_DIR = 1;        //Pull SDA high to indicate Negative/NO ACK
    I2C_Clock();     // Generate the Clock  
    SCL_DIR = 1;        // Set SCL */
   }                                                                                 
}   
            
     
void _I2C_Start(){
    SCL = 0;        // Pull SCL low   
    SCL_DIR=0;
 
    SDA_DIR = 1;        // Pull SDA High
    delay_us(1);
 
    SCL_DIR = 1;        //Pull SCL high
    delay_us(1); 
    
    SDA=0;
    SDA_DIR = 0;        //Now Pull SDA LOW, to generate the Start Condition
    delay_us(1);
 
    SCL = 0;        //Finally Clear the SCL to complete the cycle 
    SCL_DIR=0;
}               
void _I2C_Stop(void)
{
    SCL = 0;// Pull SCL low 
    SCL_DIR=0;
    delay_us(1);
                              
    SDA = 0; // Pull SDA  low
    SDA_DIR=0;
    delay_us(1);
     
    SCL_DIR = 1;            // Pull SCL High
    delay_us(1);
     
    SDA = 1;            // Now Pull SDA High, to generate the Stop Condition
}         

                                       

        
