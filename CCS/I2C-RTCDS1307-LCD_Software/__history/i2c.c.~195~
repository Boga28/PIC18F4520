#include "i2c.h"
#include "definitions.h"                                                                             
#include "ucregisters.h"     

//This function is used to generate a clock pulse on SCL line.
void I2C_Clock(void){     
    delay_us(1); 
    i2cHighScl(); // Wait for Some time and Pull the SCL line High
                  // Wdelay_us(1);        ait for Some time
    i2cLowScl();  // Pull back the SCL line low to Generate a clock pulse   
}                       
//This fun is used to receive a byte on SDA line using I2C protocol.
//8bit data is received bit-by-bit each clock and finally packed into Byte.
//MSB(bit) is received first and LSB(bit) is received at last.
uchar_t _I2C_Read(uchar_t mode){
    uchar_t i, dat=0x00;
    i2cHighSda();            //Make SDA as I/P
    for(i=0;i<8;i++){        // loop 8times to read 1-byte of data
        i2cHighScl();        // Pull SCL High                 
                                            
        dat = dat<<1;        //dat is Shifted each time and
        dat = dat | SDA;     //ORed with the received bit to pack into byte
                       
        i2cLowScl();         // Clear SCL to complete the Clock
       }
       _I2CACK(mode);
   return dat;               // Finally return the received Byte*
}         
void _I2C_Write(uchar_t  dat){
    uchar_t i;
    for(i=0;i<8;i++){         // loop 8 times to send 1-byte of data  
        if(dat & 0x80){
            i2cHighSda();     // Send Bit by Bit on SDA line
        }else{  
            i2cLowSda(); 
        }
        I2C_Clock();          // Generate Clock at SCL
        dat = dat<<1;         
      }                                                 
        i2cHighSda();         // Set SDA at last    
        I2C_Clock(); 
}      
void _I2CACK(uchar_t mode){ 
   if(mode==1){     //ACK     
    i2cLowSda();    //Pull SDA low to indicate Positive ACK 
    I2C_Clock();    //Generate the Clock
    i2cHighSda();   // Pull SDA back to High(IDLE state)
   }else{           //NACK 
    i2cHighSda();   //Pull SDA high to indicate Negative/NO ACK
    I2C_Clock();    // Generate the Clock  
    i2cHighScl();   // Set SCL 
   }                                                                                 
}                         
void _I2C_Start(){
    i2cLowScl();     // Pull SCL low  
    i2cHighSda();    // Pull SDA High 
            
    i2cHighScl();    //Pull SCL high     
    i2cLowSda();     //Now Pull SDA LOW, to generate the Start Condition  
                           
    i2cLowScl();     //Finally Clear the SCL to complete the cycle     
}               
void _I2C_Stop(void){
    i2cLowScl();   // Pull SCL low            
    i2cLowSda();   // Pull SDA  low
                     
    i2cHighScl();  // Pull SCL High 
    i2cHighSda();  // Now Pull SDA High, to generate the Stop Condition
}         

void i2cHighSda(void){    
   SDA_DIR = 1;      // bring SDA to high impedance
   delay_us(5);      
}                                       
void i2cLowSda(void){
   SDA = 0;  
   SDA_DIR = 0;      // output a logic zero
   delay_us(5);
}                                                                         
void i2cHighScl(void){
   SCL_DIR = 1;      // bring SCL to high impedance
   delay_us(5);        
}            
void i2cLowScl(void){
   SCL= 0;      
   SCL_DIR = 0;
   delay_us(5);
}       
              
