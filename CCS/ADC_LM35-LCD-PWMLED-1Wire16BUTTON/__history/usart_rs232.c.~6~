#include "ucregisters.h"                                                                                             
#include "usart_rs232.h"
#include <string.h>      

uchar_t rxData[32];   
uchar_t txData[32];
uchar_t data_in;
uint8_t rxData_count; 
unUSARTF_t unUSARTF;       
uchar_t terminal_text1[15]; 
uchar_t terminal_text2[27];                              
uchar_t terminal_text3[17];  
uint8_t terminal_text1_Count,terminal_text2_Count ,terminal_text3_Count,terminal_text4_Count; 
uint8_t terminal_text1_size,terminal_text2_size ,terminal_text3_size,terminal_text4_size; 
uint8_t noKbHit_count;    
uint8_t switchTerminal_position;                        
uint8_t UART_BUSY; 
                                          
uchar_t cmd1[]="LCD.ON";   uchar_t cmd2[]="LCD.OFF";  uchar_t cmd3[]="TEMP.ON"; uchar_t cmd4[]="TEMP.OFF"; 
uchar_t cmd5[]="LED.ON";   uchar_t cmd6[]="LED.OFF";  uchar_t cmd7[]="BUT.ON";  uchar_t cmd8[]="BUT.OFF";    
uchar_t cmd9[]="CCP1.ON";  uchar_t cmd10[]="CCP1.OFF";     
                                      
                                   
                                         
              
void USART_Init(){                            
   usart_inst.all=0x01;                                                       
                                                      
   TRISC_6=0;        // Make Tx pin as output   
   TRISC_7=1;        // Make Rx pin as input                                                                  
   //Baud rate=9600, SPBRG = (F_CPU /(64*9600))-1        
   SPBRG = 0x0C;                      
   TXSTA = 0x20;     // Enable Transmit(TX)  
   RCSTA = 0x90;     // Enable Receive(RX) & Serial
                        
   terminal_text1_size=sizeof(terminal_text1)/sizeof(terminal_text1[0]);
   terminal_text2_size=sizeof(terminal_text2)/sizeof(terminal_text2[0]);  
   terminal_text3_size=sizeof(terminal_text3)/sizeof(terminal_text3[0]);
   terminal_text4_size=32;                            
   memcpy(terminal_text1,"\fMEVCUT YAZI: ",terminal_text1_size);  
   memcpy(terminal_text2,"\rLutfen bir yazi giriniz: ",terminal_text2_size);  
   memcpy(terminal_text3,"\rLimit Asildi!!!",terminal_text3_size);  
}      
    

uchar_t USART_RxCharBuffer(){
    if(RCIF_PIR1==1){         //wait for receive interrupt flag   
    return(RCREG);           //received in RCREG register and return to main program 
    }
}                          
                                          
void USART_TxCharBuffer(uint8_t textIndex_charIndex,uint8_t mode){                
   if(OERR_RCSTA){              
      CREN_RCSTA = 0;        
      #ASM NOP #ENDASM
      CREN_RCSTA=1;
   }
   if(mode){ 
      TXREG = txData[textIndex_charIndex];             //Write char data to transmit register
   }else{
      TXREG = 
   }
   TXIF_PIR1=0;
}  


                                                        
void rs232t_txText(uint8_t text_index, uint8_t textIndex_charIndex){
    if(text_index==0&&textIndex_charIndex==0){                                   
      memcpy(txData, terminal_text1, terminal_text1_size);  
    }else if(text_index==1&&textIndex_charIndex==0){
      memcpy(txData, terminal_text2, terminal_text2_size);   
    }else if(text_index==2&&textIndex_charIndex==0){            
      memcpy(txData, terminal_text3, terminal_text3_size);  
    }else if(text_index==3&&textIndex_charIndex==0){             
      memcpy(txData, strLCD, terminal_text4_size);   
    }                                       
    USART_TxCharBuffer(textIndex_charIndex);  
                                                                                                                 
}      
uint8_t compare(){            
                                   
   return 15;    
}
void activationCommands(){  
    if(!strncmp(rxData,cmd1,6)){
      usart_inst.a.LCD=1; 
      memcpy(rxData, "INFORMELEKTRONIKAR-GE    STAJYER", 32); 
   }else if(!strncmp(rxData,cmd2,7)){ 
      usart_inst.a.LCD=0;
      lcdClear();                       
   }else if(!strncmp(rxData,cmd3,7)){
      usart_inst.a.TEMP=1;           
   }else if(!strncmp(rxData,cmd4,8)){       
   usart_inst.a.TEMP=0;                     
   }else if(!strncmp(rxData,cmd5,6)){           
      usart_inst.a.LED=1;                             
   }else if(!strncmp(rxData,cmd6,7)){               
      usart_inst.a.LED=0;      
      PORTB_7=0;                  
   }else if(!strncmp(rxData,cmd7,6)){               
      usart_inst.a.BUT=1;               
   }else if(!strncmp(rxData,cmd8,7)){               
      usart_inst.a.BUT=0;                      
   }                      
   else if(!strncmp(rxData,cmd9,7)){               
      usart_inst.a.CCP1=1; 
      TMR2ON=1;
   }else if(!strncmp(rxData,cmd10,8)){ 
      TMR2ON=0;
      usart_inst.a.CCP1=0;                      
   }  
   
}                  
                                
void rs232t(){   
      unUSARTF.stUSARTF.noKbhit=0;
      noKbHit_count=0;                       
      data_in=USART_RxCharBuffer();                 
      if(data_in==8 && rxData_count>0){                                                 
         rxData_count--;                                                          
         rxData[rxData_count]=0;                                                          
      }else if(data_in==13){  
         unUSARTF.all=0;     
         unUSARTF.stUSARTF.enter_flag=1; 
         terminal_text1_Count=0,terminal_text2_Count=0,terminal_text3_Count=0,terminal_text4_Count=0;
         activationCommands();
         rxData[rxData_count+1] = "\0"; 
         memcpy(strLCD, rxData, 32);  
         memset(rxData, 0, sizeof(rxData));                       
         rxData_count=0;    
         switchTerminal_position=0;       
      }else if(rxData_count>31){ 
         switchTerminal_position=4;
         unUSARTF.stUSARTF.recieve_exceed=1;
         unUSARTF.stUSARTF.terminal_text3_flag=0;
         terminal_text3_Count=0;  
      }else {                        
         rxData[rxData_count] = data_in; 
         rxData_count++;            
      }  
      
}                                              
