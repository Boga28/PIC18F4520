CCS PCH C Compiler, Version 5.015, 5967               18-Jul-23 09:05

               Filename:   C:\18F4520\CCS\dump\main.lst

               ROM used:   500 bytes (2%)
                           Largest free fragment is 32264
               RAM used:   25 (2%) at main() level
                           34 (2%) worst case
               Stack used: 4 locations (1 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   01DC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   0192
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "main.h" 
.................... #ifndef MAIN_H  
.................... #define MAIN_H    
.................... #include <18F4520.h>                                                                                                                                                            
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
....................  
.................... #list 
....................  
....................                                      
.................... #FUSES WDT                      //Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:32 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST,NOMCLR                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
....................                            
.................... #define Baudrate        9600                // Veri HIZI 8MHz icin 2400 ve assagisi 
.................... //#define OneBitDelay     (1000000/Baudrate)  // 400us -> gelen bitin orta noktasindan almak icin 200us   
.................... #define DataBitCount    8                   // 8 Bit                 
....................  
.................... #endif //MAIN_H 
....................  
....................                         
....................  
.................... #include "definitions.h"                                                     
.................... #ifndef DEFINITIONS_H      
.................... #define DEFINITIONS_H    
....................  
.................... typedef unsigned int16  uint32_t;                                                     
.................... typedef unsigned int16  uint16_t;  
.................... typedef unsigned int8   uint8_t; 
.................... typedef unsigned char   uchar_t; 
....................                
.................... #endif //DEFINITIONS_H       
....................  
.................... #include "ucregisters.h"        
.................... #ifndef UCREGISTER_H 
.................... #define UCREGISTER_H 
....................             
.................... //Control PINS 
.................... #byte TRISB   = 0x0F93 
.................... #byte PORTB   = 0x0F81 
....................  
.................... #bit  UART_TX_DIR = TRISB.1   //TX 
.................... #bit  UART_RX_DIR = TRISB.0   //RX 
....................                                
.................... #bit  UART_TX = PORTB.1       //TX    
.................... #bit  UART_RX = PORTB.0       //RX    
....................  
.................... #bit  LED_DIR = TRISB.2       //TX    
.................... #bit  LED = PORTB.2       //RX   
....................                   
....................                           
.................... //OSILATOR - 8MHZ 
.................... #byte OSCCON = 0x0FD3        
.................... #bit  IRCF2 =OSCCON.6   
.................... #bit  IRCF1 =OSCCON.5                      
.................... #bit  IRCF0 =OSCCON.4  
....................         
.................... //TIMER1 INTERRUPT BYTE adresleri 
.................... #byte ADCON1 = 0x0FC1     
.................... #byte INTCON = 0x0FF2  // INTCON REGISTER 
.................... #byte INTCON2=0x0FF1   //                                                                                             
....................                                               
.................... #bit INTCON_INT0IF=INTCON.1      //RB0 enable   
.................... #bit INTCON_INT0IE=INTCON.4      //RB0 enable 
.................... #bit INTCON_GIE_GIEH = INTCON.7  // Global Interrupt Enable bit   
....................                      
.................... #endif UCREGISTER_H                                                                          
....................  
.................... #include "delayms.h"   
.................... #ifndef DELAYMS_H   
.................... #define DELAYMS_H    
....................  
.................... void delayMsFun(uint16_t);  
.................... void delayUsFun(uint32_t us); 
....................  
.................... #endif //DELAYMS_H   
....................  
.................... #include "delayms.c" 
....................  
.................... #include "definitions.h"  
.................... #ifndef DEFINITIONS_H      
.................... #define DEFINITIONS_H    
....................  
.................... typedef unsigned int16  uint32_t;                                                     
.................... typedef unsigned int16  uint16_t;  
.................... typedef unsigned int8   uint8_t; 
.................... typedef unsigned char   uchar_t; 
....................                
.................... #endif //DEFINITIONS_H       
....................  
.................... #include "delayms.h" 
.................... #ifndef DELAYMS_H   
.................... #define DELAYMS_H    
....................  
.................... void delayMsFun(uint16_t);  
.................... void delayUsFun(uint32_t us); 
....................  
.................... #endif //DELAYMS_H   
....................  
....................    
.................... void delayMsFun(uint16_t msecs)  // Delay function - generates a delay of specified msecs 
.................... {   uint16_t i,j;  
....................     for(i=0;i<=msecs;i++){               
....................       for(j=0;j<197;j++); 
....................     }                                
.................... }  
.................... void delayUsFun(uint32_t us)  // Delay function -  //1 tanesi 2.6us    
.................... {   uint32_t i;  
....................     uchar_t j;        
....................     for(i=0;i<=us;i++){ 
0096:  CLRF   20
0098:  CLRF   1F
009A:  MOVF   20,W
009C:  SUBWF  1E,W
009E:  BNC   00B0
00A0:  BNZ   00A8
00A2:  MOVF   1F,W
00A4:  SUBWF  1D,W
00A6:  BNC   00B0
00A8:  INCF   1F,F
00AA:  BTFSC  FD8.2
00AC:  INCF   20,F
00AE:  BRA    009A
....................     }                                
00B0:  RETURN 0
.................... }   
....................  
....................  
....................                 
.................... uint32_t OneBitDelay;     
.................... uchar_t ch;    
.................... //#use delay (internal=8MHz)       
.................... //#use rs232(baud=9600, xmit=PIN_B1,rcv=PIN_B0)                     
....................                        
.................... void setup(void){  
....................    //Setup Osilator 
....................    IRCF2 = 1; 
*
01AE:  BSF    FD3.6
....................    IRCF1 = 1; 
01B0:  BSF    FD3.5
....................    IRCF0 = 1;   
01B2:  BSF    FD3.4
....................                 
....................    // Kesmelere izin verildi 
....................    ADCON1= 0x0F;                                               
01B4:  MOVLW  0F
01B6:  MOVWF  FC1
....................    INTCON_GIE_GIEH = 1;                        
01B8:  BSF    FF2.7
....................    INTCON2=0;      
01BA:  CLRF   FF1
....................    INTCON_INT0IE=1;    
01BC:  BSF    FF2.4
01BE:  GOTO   01F0 (RETURN)
....................     
.................... }                              
....................                        
.................... void InitSoftUart(){      
....................        
....................    LED_DIR=0;                                     
01C2:  BCF    F93.2
....................    LED=0;            //1000000/Baudrate)/6                       
01C4:  BCF    F81.2
....................    OneBitDelay =(13);  
01C6:  CLRF   17
01C8:  MOVLW  0D
01CA:  MOVWF  16
....................    UART_TX=1;      //TX  
01CC:  BSF    F81.1
....................                                           
....................    UART_RX_DIR=1;  //RX                   
01CE:  BSF    F93.0
....................    UART_TX_DIR=0;  //TX    
01D0:  BCF    F93.1
01D2:  GOTO   01F2 (RETURN)
.................... }   
.................... void uartInterSetup(){ 
....................    UART_TX=1;      //TX  
....................             
....................    UART_RX_DIR=1;  //RX                   
....................    UART_TX_DIR=0;  //TX 
.................... } 
....................        
....................                            
....................                           
.................... uchar_t UART_Recieve(){  
*
00B2:  CLRF   19
....................   uchar_t DataValue=0;              
....................  // while(UART_RX==1); 
....................   delayUsFun(OneBitDelay);         
00B4:  MOVFF  17,1E
00B8:  MOVFF  16,1D
00BC:  RCALL  0096
....................   delayUsFun(OneBitDelay/2);                                                                                       
00BE:  BCF    FD8.0
00C0:  RRCF   17,W
00C2:  MOVWF  1C
00C4:  RRCF   16,W
00C6:  MOVWF  1B
00C8:  MOVFF  1C,1E
00CC:  MOVWF  1D
00CE:  RCALL  0096
....................   for(uchar_t i=0; i <DataBitCount;i++){   
00D0:  CLRF   1A
00D2:  MOVF   1A,W
00D4:  SUBLW  07
00D6:  BNC   0100
....................     if(UART_RX==1){  
00D8:  BTFSS  F81.0
00DA:  BRA    00F2
....................       DataValue |= (1<<i);    
00DC:  MOVLW  01
00DE:  MOVWF  00
00E0:  MOVF   1A,W
00E2:  MOVWF  01
00E4:  BZ    00EE
00E6:  BCF    FD8.0
00E8:  RLCF   00,F
00EA:  DECFSZ 01,F
00EC:  BRA    00E6
00EE:  MOVF   00,W
00F0:  IORWF  19,F
....................      }                                    
....................      delayUsFun(OneBitDelay); 
00F2:  MOVFF  17,1E
00F6:  MOVFF  16,1D
00FA:  RCALL  0096
00FC:  INCF   1A,F
00FE:  BRA    00D2
....................   }                           
....................   if(UART_RX==1){  
0100:  BTFSS  F81.0
0102:  BRA    011E
....................     delayUsFun(OneBitDelay/2); 
0104:  BCF    FD8.0
0106:  RRCF   17,W
0108:  MOVWF  1C
010A:  RRCF   16,W
010C:  MOVWF  1B
010E:  MOVFF  1C,1E
0112:  MOVWF  1D
0114:  RCALL  0096
....................     return DataValue;      
0116:  MOVFF  19,01
011A:  BRA    0134
....................   }else{            
011C:  BRA    0134
....................     delayUsFun(OneBitDelay/2);             
011E:  BCF    FD8.0
0120:  RRCF   17,W
0122:  MOVWF  1C
0124:  RRCF   16,W
0126:  MOVWF  1B
0128:  MOVFF  1C,1E
012C:  MOVWF  1D
012E:  RCALL  0096
....................     return 0x000; 
0130:  MOVLW  00
0132:  MOVWF  01
....................   } 
0134:  GOTO   0198 (RETURN)
.................... }   
....................                                 
.................... void UART_Transmit(uchar_t DataValue){ 
....................    UART_TX=0;                      
0138:  BCF    F81.1
....................    delayUsFun(OneBitDelay);  
013A:  MOVFF  17,1E
013E:  MOVFF  16,1D
0142:  RCALL  0096
....................    for(uchar_t i=0; i <DataBitCount;i++){ 
0144:  CLRF   1A
0146:  MOVF   1A,W
0148:  SUBLW  07
014A:  BNC   0178
....................       if(((DataValue & (1<<i)) != 0)){  
014C:  MOVLW  01
014E:  MOVWF  00
0150:  MOVF   1A,W
0152:  MOVWF  01
0154:  BZ    015E
0156:  BCF    FD8.0
0158:  RLCF   00,F
015A:  DECFSZ 01,F
015C:  BRA    0156
015E:  MOVF   00,W
0160:  ANDWF  19,W
0162:  BZ    0168
....................          UART_TX=1;      
0164:  BSF    F81.1
....................       }else{               
0166:  BRA    016A
....................          UART_TX=0;               
0168:  BCF    F81.1
....................       }                           
....................          delayUsFun(OneBitDelay);    
016A:  MOVFF  17,1E
016E:  MOVFF  16,1D
0172:  RCALL  0096
0174:  INCF   1A,F
0176:  BRA    0146
....................    }                  
....................    //Send Stop Bit 
....................    UART_TX=1;   
0178:  BSF    F81.1
....................    delayUsFun(OneBitDelay+1000);  
017A:  MOVLW  E8
017C:  ADDWF  16,W
017E:  MOVWF  1B
0180:  MOVLW  03
0182:  ADDWFC 17,W
0184:  MOVWF  1C
0186:  MOVWF  1E
0188:  MOVFF  1B,1D
018C:  RCALL  0096
018E:  GOTO   01A4 (RETURN)
.................... }       
....................  
.................... void WDTreset(void){          
....................    #asm                           
*
01D6:  CLRWDT
....................    CLRWDT                                      
....................    #endasm                                  
01D8:  GOTO   01F4 (RETURN)
.................... }    
....................   
....................  
.................... #INT_EXT                              
.................... void external_RB0(){          
....................    ch = 0;  
*
0192:  CLRF   18
....................    INTCON_INT0IE=0; 
0194:  BCF    FF2.4
....................    ch=UART_Recieve();         
0196:  BRA    00B2
0198:  MOVFF  01,18
....................       //if(ch=='j')  
....................       LED=~LED;            
019C:  BTG    F81.2
....................    UART_Transmit(ch);                   
019E:  MOVFF  18,19
01A2:  BRA    0138
....................    INTCON_INT0IF=0;     
01A4:  BCF    FF2.1
....................    INTCON_INT0IE=1;  
01A6:  BSF    FF2.4
01A8:  BCF    FF2.1
01AA:  GOTO   0054
.................... }    
....................                             
.................... void main(){                     
*
01DC:  CLRF   FF8
01DE:  BCF    FD0.7
01E0:  BSF    07.7
01E2:  MOVF   FC1,W
01E4:  ANDLW  C0
01E6:  IORLW  0F
01E8:  MOVWF  FC1
01EA:  MOVLW  07
01EC:  MOVWF  FB4
....................    setup();                  
01EE:  BRA    01AE
....................    InitSoftUart(); 
01F0:  BRA    01C2
....................    while(TRUE){             
....................    WDTreset();           
01F2:  BRA    01D6
01F4:  BRA    01F2
....................       //ch=UART_Recieve();        
....................       //UART_Transmit(ch);                               
....................    }          
....................  
.................... }                                              
01F6:  SLEEP 

Configuration Fuses:
   Word  1: CF00   FCMEN IESO
   Word  2: 0F18   PUT NOBROWNOUT BORV21 WDT WDT128
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
